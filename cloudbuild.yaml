substitutions:
  _PROJECT: "cloudside-academy"
  _ZONE: "us-central1-a"
  _MIG_NAME: "my-mig"
  _TEMPLATE_NAME: "myapp-template"
  
steps:
# Step 1: Create new instance template
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'create-instance-template'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e
      gcloud compute instance-templates create "${_TEMPLATE_NAME}" \
        --project="${_PROJECT}" \
        --machine-type=e2-medium \
        --metadata-from-file startup-script=startup.sh \
        --tags=http-server \
        --boot-disk-size=20GB \
        --boot-disk-type=pd-balanced \
        --image-family=ubuntu-2204-lts \
        --image-project=ubuntu-os-cloud \
        --quiet

      # 3. Save template name for the next step
      echo "${_TEMPLATE_NAME}" > /workspace/_TEMPLATE_NAME.txt
# Step 2: check MIG exist or not and create it if not there
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'create-or-update-mig'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e
      _TEMPLATE_NAME=$(cat /workspace/_TEMPLATE_NAME.txt)
      _MIG_FULL_NAME="projects/${_PROJECT}/zones/${_ZONE}/instanceGroupManagers/${_MIG_NAME}"
      
      # Check if the MIG exists
      if gcloud compute instance-groups managed describe "${_MIG_NAME}" \
          --zone="${_ZONE}" --project="${_PROJECT}" &> /dev/null; then
          
          # MIG EXISTS: Proceed to rolling update (Step 2 will handle the update)
          echo "MIG ${_MIG_NAME} already exists. Proceeding to update..."
          
      else
          # MIG DOES NOT EXIST: Create it using the new template
          echo "MIG ${_MIG_NAME} not found. Creating a new MIG..."
          gcloud compute instance-groups managed create "${_MIG_NAME}" \
              --project="${_PROJECT}" \
              --zone="${_ZONE}" \
              --base-instance-name="${_MIG_NAME}-instance" \
              --template="${_TEMPLATE_NAME}" \
              --size=1 \
              --quiet
          
          # Since the MIG was just created, the rolling-action start-update is not necessary
          # and could cause issues. We'll exit this step and then ensure Step 2 only runs 
          # an update if the MIG existed previously. For simplicity, we just create it here
          # and let the next step handle the update intent, which will now find the resource.
      fi
# Step 3: Rolling update the MIG for zero-downtime
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'rolling-update'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e
      _TEMPLATE_NAME=$(cat /workspace/_TEMPLATE_NAME.txt)
      echo "Starting rolling update for MIG ${_MIG_NAME} using template ${_TEMPLATE_NAME}"

      # max-unavailable=0: New instance must be healthy before old one is deleted (Zero Downtime).
      # max-surge=1: Allows one extra instance to spin up for the swap.
      gcloud compute instance-groups managed rolling-action start-update "${_MIG_NAME}" \
        --project="${_PROJECT}" \
        --zone="${_ZONE}" \
        --version=template="${_TEMPLATE_NAME}" \
        --max-surge=1 \
        --max-unavailable=0 \
        --type=proactive \
        --quiet
